{
  "name": "Ad Script Refactor Workflow",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ad-script-processing",
        "options": {},
        "authentication": "headerAuth"
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ad-script-processing",
      "credentials": {
        "httpHeaderAuth": {
          "id": "webhook-auth",
          "name": "Laravel Webhook Auth"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "task_id",
              "value": "={{ $json.task_id }}"
            },
            {
              "name": "reference_script",
              "value": "={{ $json.reference_script }}"
            },
            {
              "name": "outcome_description",
              "value": "={{ $json.outcome_description }}"
            }
          ]
        }
      },
      "id": "set-variables",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "operation": "completion",
        "model": "gpt-4",
        "promptType": "text",
        "promptValues": {
          "text": "You are an expert JavaScript developer specializing in advertising script optimization.\n\nPlease refactor the following advertising script to improve performance, readability, and maintainability:\n\n```javascript\n{{ $json.reference_script }}\n```\n\nDesired outcome: {{ $json.outcome_description }}\n\nRespond with a valid JSON object containing:\n- \"new_script\": The refactored code\n- \"analysis\": Object with analysis details including improvements made, performance impact, maintainability improvements, potential issues, and recommendations."
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 2000
        }
      },
      "id": "ai-agent",
      "name": "AI Agent",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response and prepare data\ntry {\n  const aiResponse = $input.first().json.text || $input.first().json.choices[0].text || $input.first().json.choices[0].message.content;\n  let parsedResponse;\n  \n  try {\n    parsedResponse = JSON.parse(aiResponse);\n  } catch (parseError) {\n    // Try to extract JSON if wrapped in markdown or other text\n    const jsonMatch = aiResponse.match(/```json\\s*([\\s\\S]*?)\\s*```/) || \n                      aiResponse.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      parsedResponse = JSON.parse(jsonMatch[1] || jsonMatch[0]);\n    } else {\n      throw new Error('Could not parse JSON from response');\n    }\n  }\n  \n  // Validate required fields\n  if (!parsedResponse.new_script || !parsedResponse.analysis) {\n    throw new Error('Invalid AI response: missing required fields');\n  }\n  \n  // Get task_id from the original data\n  const taskId = $('set-variables').first().json.task_id;\n  \n  return {\n    task_id: taskId,\n    new_script: parsedResponse.new_script,\n    analysis: parsedResponse.analysis,\n    status: 'success'\n  };\n} catch (error) {\n  // Get task_id from the original data\n  const taskId = $('set-variables').first().json.task_id;\n  \n  return {\n    task_id: taskId,\n    error: `Failed to process AI response: ${error.message}`,\n    status: 'error'\n  };\n}"
      },
      "id": "process-response",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "http://app/api/ad-scripts/{{ $json.task_id }}/result",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "id": "callback-request",
      "name": "Callback Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "webhook-auth",
          "name": "Laravel Webhook Auth"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"processing\", \"message\": \"Processing started\", \"task_id\": $json.task_id } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 460]
    }
  ],
  "connections": {
    "webhook-trigger": {
      "main": [
        [
          {
            "node": "set-variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set-variables": {
      "main": [
        [
          {
            "node": "ai-agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "webhook-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ai-agent": {
      "main": [
        [
          {
            "node": "process-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-response": {
      "main": [
        [
          {
            "node": "callback-request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}

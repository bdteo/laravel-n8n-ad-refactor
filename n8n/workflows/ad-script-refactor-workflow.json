{
  "name": "Ad Script Refactor Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ad-script-processing",
        "options": {
          "noResponseBody": false
        },
        "authentication": "headerAuth"
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "ad-script-processing",
      "credentials": {
        "httpHeaderAuth": {
          "id": "webhook-auth",
          "name": "Laravel Webhook Auth"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "task_id",
              "value": "={{ $json.task_id }}"
            },
            {
              "name": "reference_script",
              "value": "={{ $json.reference_script }}"
            },
            {
              "name": "outcome_description",
              "value": "={{ $json.outcome_description }}"
            }
          ]
        },
        "options": {}
      },
      "id": "set-variables",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.task_id }}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{ $json.reference_script }}",
              "operation": "isNotEmpty"
            }
          ]
        },
        "combineOperation": "all"
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "messages": {
          "messageType": "multipleMessages",
          "values": [
            {
              "role": "system",
              "content": "You are an expert JavaScript developer specializing in advertising script optimization. Your task is to refactor advertising scripts to improve performance, readability, and maintainability while preserving functionality.\n\nYou must respond with a valid JSON object containing exactly these fields:\n- \"new_script\": The refactored JavaScript code as a string\n- \"analysis\": An object with detailed analysis including:\n  - \"improvements\": Array of improvements made\n  - \"performance_impact\": String describing expected performance changes\n  - \"maintainability\": String describing maintainability improvements\n  - \"potential_issues\": Array of potential issues or considerations\n  - \"recommendations\": Array of additional recommendations\n\nEnsure the refactored script maintains the same functionality while implementing best practices for modern JavaScript development."
            },
            {
              "role": "user",
              "content": "Please refactor the following advertising script:\n\n**Original Script:**\n```javascript\n{{ $json.reference_script }}\n```\n\n**Desired Outcome:**\n{{ $json.outcome_description }}\n\nPlease provide the refactored script and detailed analysis in the specified JSON format."
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 2000,
          "timeout": 60000
        }
      },
      "id": "ai-agent",
      "name": "AI Agent (GPT-4o)",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [
        900,
        200
      ],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.choices && $json.choices[0] && $json.choices[0].message && $json.choices[0].message.content }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "check-ai-response",
      "name": "Check AI Response",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1120,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response and prepare callback data\ntry {\n  const aiResponse = $input.first().json.choices[0].message.content;\n  const parsedResponse = JSON.parse(aiResponse);\n  \n  // Validate required fields\n  if (!parsedResponse.new_script || !parsedResponse.analysis) {\n    throw new Error('Invalid AI response: missing required fields');\n  }\n  \n  // Get task_id from the original webhook data\n  const taskId = $('Set Variables').first().json.task_id;\n  \n  return {\n    task_id: taskId,\n    new_script: parsedResponse.new_script,\n    analysis: parsedResponse.analysis,\n    status: 'success'\n  };\n} catch (error) {\n  // Get task_id from the original webhook data\n  const taskId = $('Set Variables').first().json.task_id;\n  \n  return {\n    task_id: taskId,\n    error: `Failed to parse AI response: ${error.message}`,\n    status: 'error'\n  };\n}"
      },
      "id": "process-success",
      "name": "Process Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        100
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle AI processing error\nconst taskId = $('Set Variables').first().json.task_id;\nconst errorMessage = $input.first().json.error || 'AI processing failed';\n\nreturn {\n  task_id: taskId,\n  error: `AI processing error: ${errorMessage}`,\n  status: 'error'\n};"
      },
      "id": "process-ai-error",
      "name": "Process AI Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle input validation error\nconst taskId = $('Set Variables').first().json.task_id || 'unknown';\n\nreturn {\n  task_id: taskId,\n  error: 'Invalid input: missing required fields (task_id or reference_script)',\n  status: 'error'\n};"
      },
      "id": "process-validation-error",
      "name": "Process Validation Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.LARAVEL_APP_URL || 'http://app:8000' }}/api/ad-scripts/{{ $json.task_id }}/result",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "X-Source",
              "value": "n8n-workflow"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "new_script",
              "value": "={{ $json.new_script }}"
            },
            {
              "name": "analysis",
              "value": "={{ $json.analysis }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryInterval": 1000
          }
        }
      },
      "id": "success-callback",
      "name": "Success Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1560,
        100
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "laravel-callback-auth",
          "name": "Laravel Callback Auth"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $env.LARAVEL_APP_URL || 'http://app:8000' }}/api/ad-scripts/{{ $json.task_id }}/result",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "X-Source",
              "value": "n8n-workflow"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "error",
              "value": "={{ $json.error }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryInterval": 1000
          }
        }
      },
      "id": "error-callback",
      "name": "Error Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1560,
        350
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "laravel-callback-auth",
          "name": "Laravel Callback Auth"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"Callback sent successfully\", \"task_id\": $json.task_id } }}"
      },
      "id": "webhook-response-success",
      "name": "Webhook Response Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        100
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"error\", \"message\": \"Error callback sent\", \"task_id\": $json.task_id } }}"
      },
      "id": "webhook-response-error",
      "name": "Webhook Response Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        350
      ]
    },
    {
      "parameters": {
        "jsCode": "// Global error handler for unexpected failures\nlet taskId = 'unknown';\nlet errorMessage = 'Unknown error occurred';\n\ntry {\n  // Try to get task_id from various possible sources\n  if ($('Set Variables').first() && $('Set Variables').first().json.task_id) {\n    taskId = $('Set Variables').first().json.task_id;\n  } else if ($input.first() && $input.first().json && $input.first().json.task_id) {\n    taskId = $input.first().json.task_id;\n  }\n  \n  // Get error details\n  if ($input.first() && $input.first().json && $input.first().json.error) {\n    errorMessage = $input.first().json.error.message || $input.first().json.error;\n  } else if ($input.first() && $input.first().error) {\n    errorMessage = $input.first().error.message || $input.first().error;\n  }\n} catch (e) {\n  errorMessage = 'Critical workflow error: ' + e.message;\n}\n\nreturn {\n  task_id: taskId,\n  error: `Workflow error: ${errorMessage}`,\n  status: 'error'\n};"
      },
      "id": "global-error-handler",
      "name": "Global Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        500
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.LARAVEL_APP_URL || 'http://app:8000' }}/api/ad-scripts/{{ $json.task_id }}/result",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "X-Source",
              "value": "n8n-workflow"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "error",
              "value": "={{ $json.error }}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryInterval": 1000
          },
          "ignoreHttpStatusErrors": true
        }
      },
      "id": "global-error-callback",
      "name": "Global Error Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1560,
        500
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "laravel-callback-auth",
          "name": "Laravel Callback Auth"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"error\", \"message\": \"Critical error handled\", \"task_id\": $json.task_id } }}"
      },
      "id": "webhook-response-critical",
      "name": "Webhook Response Critical",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        500
      ]
    },
    {
      "parameters": {},
      "id": "error-trigger-webhook",
      "name": "Error Trigger - Webhook",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        240,
        600
      ]
    },
    {
      "parameters": {},
      "id": "error-trigger-variables",
      "name": "Error Trigger - Variables",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        460,
        600
      ]
    },
    {
      "parameters": {},
      "id": "error-trigger-ai",
      "name": "Error Trigger - AI",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        900,
        600
      ]
    },
    {
      "parameters": {},
      "id": "error-trigger-callback",
      "name": "Error Trigger - Callback",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        1560,
        600
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "AI Agent (GPT-4o)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent (GPT-4o)": {
      "main": [
        [
          {
            "node": "Check AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AI Response": {
      "main": [
        [
          {
            "node": "Process Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process AI Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Success": {
      "main": [
        [
          {
            "node": "Success Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Error": {
      "main": [
        [
          {
            "node": "Error Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Validation Error": {
      "main": [
        [
          {
            "node": "Error Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Callback": {
      "main": [
        [
          {
            "node": "Webhook Response Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Callback": {
      "main": [
        [
          {
            "node": "Webhook Response Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global Error Handler": {
      "main": [
        [
          {
            "node": "Global Error Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global Error Callback": {
      "main": [
        [
          {
            "node": "Webhook Response Critical",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger - Webhook": {
      "main": [
        [
          {
            "node": "Global Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger - Variables": {
      "main": [
        [
          {
            "node": "Global Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger - AI": {
      "main": [
        [
          {
            "node": "Global Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger - Callback": {
      "main": [
        [
          {
            "node": "Global Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "UTC",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "enabled": true
    }
  },
  "versionId": "2",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "ad-script-refactor",
  "tags": [
    {
      "id": "laravel-integration",
      "name": "Laravel Integration"
    },
    {
      "id": "ai-processing",
      "name": "AI Processing"
    },
    {
      "id": "error-handling",
      "name": "Error Handling"
    }
  ]
} 
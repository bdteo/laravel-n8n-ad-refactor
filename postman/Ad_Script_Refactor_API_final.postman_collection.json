{
  "info": {
    "_postman_id": "0687BF25-42FE-48B3-85B7-04C8C2A1F425",
    "name": "Laravel n8n Ad Script Refactor API",
    "description": "Postman collection for the Ad Script Refactor API. Demonstrates creating tasks for refactoring advertising copy (e.g., marketing slogans, ad text) and simulating n8n callbacks.\n\n**Environment Variables Needed:**\n- `base_url`: Root URL for the API (e.g., http://localhost:8000/api)\n- `n8n_callback_hmac_secret`: Shared secret for HMAC signature verification of n8n callbacks.\n\n**Dynamic Variables (set by test scripts):**\n- `created_task_id`: Populated by the 'Create Ad Script Task (Success)' request. Used for the success callback.\n- `error_test_task_id`: Populated by the pre-request script of 'n8n Callback - Failure'. Used for the failure callback.\n- `hmac_signature`: Populated by pre-request scripts for callback requests.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Ad Script Tasks",
      "description": "Endpoints related to managing ad script refactoring tasks.",
      "item": [
        {
          "name": "Create Ad Script Task (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 202 Accepted\", function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure for task creation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data.status === 'pending' || jsonData.data.status === 'processing').to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('created_at');",
                  "});",
                  "",
                  "pm.test(\"Task ID is a valid UUID and set as env variable\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const taskId = jsonData.data.id;",
                  "    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
                  "    pm.expect(taskId).to.match(uuidRegex);",
                  "    if (taskId) {",
                  "        pm.environment.set(\"created_task_id\", taskId);",
                  "        console.log(\"Set environment variable 'created_task_id' to: \" + taskId);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-Disable-Rate-Limiting",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"reference_script\": \"Our current summer sale slogan: 'Big Summer Blowout! Everything Must Go!' - it feels a bit dated.\",\n    \"outcome_description\": \"Rewrite this for a younger audience (18-25), make it sound trendy and exciting for social media. Emphasize limited-time offers and the 'cool factor'. Keep it short, under 140 characters. Tone: Playful and urgent.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ad-scripts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "ad-scripts"
              ]
            },
            "description": "Creates a new ad script refactoring task. The system will return a 202 Accepted response (or 200 if QUEUE_CONNECTION=sync and n8n responds immediately), and the task will be queued for processing by n8n."
          },
          "response": []
        },
        {
          "name": "Create Ad Script Task (Validation Error - Missing Fields)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422 Unprocessable Entity\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation errors for required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message', 'The given data was invalid.');",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.have.property('reference_script');",
                  "    pm.expect(jsonData.errors).to.have.property('outcome_description');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-Disable-Rate-Limiting",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ad-scripts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "ad-scripts"
              ]
            },
            "description": "Demonstrates validation error when required fields (`reference_script`, `outcome_description`) are missing."
          },
          "response": []
        },
        {
          "name": "Create Ad Script Task (Validation Error - Min Length)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422 Unprocessable Entity\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation errors for min length\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.have.property('reference_script');",
                  "    pm.expect(jsonData.errors.reference_script[0]).to.include('must be at least 10 characters');",
                  "    pm.expect(jsonData.errors).to.have.property('outcome_description');",
                  "    pm.expect(jsonData.errors.outcome_description[0]).to.include('must be at least 5 characters');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-Disable-Rate-Limiting",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"reference_script\": \"short\",\n    \"outcome_description\": \"Shrt\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ad-scripts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "ad-scripts"
              ]
            },
            "description": "Demonstrates validation error for field minimum length constraints."
          },
          "response": []
        }
      ]
    },
    {
      "name": "n8n Callbacks (Simulated)",
      "description": "These requests simulate callbacks from n8n. The HMAC signature is generated by a pre-request script (if n8n_callback_hmac_secret is set).",
      "item": [
        {
          "name": "n8n Callback - Success",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const requestBody = pm.request.body.raw;",
                  "const secret = pm.environment.get(\"n8n_callback_hmac_secret\");",
                  "const requestName = pm.request.name;",
                  "",
                  "if (!requestBody) {",
                  "    console.warn(`[${requestName}] Request body is empty for HMAC generation.`);",
                  "    pm.environment.set(\"hmac_signature\", \"invalid_due_to_empty_body\");",
                  "    return;",
                  "}",
                  "",
                  "const placeholderSecrets = [\"{{N8N_CALLBACK_HMAC_SECRET_CI}}\", \"{{N8N_CALLBACK_HMAC_SECRET}}\", \"your-local-hmac-secret\", \"your-n8n-callback-hmac-secret-here\"];",
                  "if (!secret || placeholderSecrets.includes(secret) || secret.trim() === '') {",
                  "    console.warn(`[${requestName}] 'n8n_callback_hmac_secret' not set or is placeholder. Signature will be invalid or bypassed if N8N_DISABLE_AUTH=true.`);",
                  "    pm.environment.set(\"hmac_signature\", \"invalid_due_to_missing_secret\");",
                  "    return;",
                  "}",
                  "",
                  "try {",
                  "    const signature = CryptoJS.HmacSHA256(requestBody, secret).toString(CryptoJS.enc.Hex);",
                  "    const fullSignature = \"sha256=\" + signature;",
                  "    pm.environment.set(\"hmac_signature\", fullSignature);",
                  "    console.log(`[${requestName}] Generated HMAC Signature: ${fullSignature.substring(0,17)}...`);",
                  "} catch (e) {",
                  "    console.error(`[${requestName}] Error generating HMAC: ${e.message}`);",
                  "    pm.environment.set(\"hmac_signature\", \"invalid_due_to_generation_error\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates task completed successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('status', 'completed');",
                  "    pm.expect(jsonData.data).to.have.property('was_updated', true);",
                  "    pm.expect(jsonData.data).to.have.property('new_script');",
                  "    pm.expect(jsonData.data).to.have.property('analysis');",
                  "    pm.expect(jsonData.data.new_script).to.be.a('string');",
                  "    pm.expect(jsonData.data.analysis).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-N8N-Signature",
                "value": "{{hmac_signature}}"
              },
              {
                "key": "X-Disable-Rate-Limiting",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"new_script\": \"☀️ Epic Summer Vibes ONLY! 🤘 Cop the freshest deals before they melt away! 🔥 #SummerSteals #LimitedDrop\",\n    \"analysis\": {\n        \"improvements_made\": \"Used emojis to add visual appeal, adopted trendy language for younger audience, emphasized urgency with limited-time messaging\",\n        \"tone_analysis\": \"Playful, urgent, trendy - perfect for 18-25 demographic\",\n        \"target_audience_fit\": \"High compatibility with young adults through slang and emoji usage\",\n        \"length_compliance\": \"Successfully kept under 140 characters for social media\",\n        \"persuasiveness_enhancements\": \"Created urgency with 'before they melt away' and hashtag strategy\",\n        \"potential_issues\": \"Slang might become dated quickly, emoji display varies across platforms\",\n        \"recommendations\": \"A/B test with different emoji combinations, consider specific discount percentages\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ad-scripts/{{created_task_id}}/result",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "ad-scripts",
                "{{created_task_id}}",
                "result"
              ]
            },
            "description": "Simulates a successful callback from n8n after AI processing. Uses `{{created_task_id}}` from the 'Create Task' request."
          },
          "response": []
        },
        {
          "name": "n8n Callback - Failure",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Create a separate task for the failure test",
                  "const createTaskRequest = {",
                  "    url: pm.environment.get('base_url') + '/ad-scripts',",
                  "    method: 'POST',",
                  "    header: {",
                  "        'Content-Type': 'application/json',",
                  "        'Accept': 'application/json'",
                  "        'X-Disable-Rate-Limiting': 'true',",
                  "    },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            reference_script: 'This is an ad script that will simulate a processing failure.',",
                  "            outcome_description: 'Intentionally cause a failure in n8n for testing purposes.'",
                  "        })",
                  "    }",
                  "};",
                  "",
                  "pm.sendRequest(createTaskRequest, function (err, res) {",
                  "    if (err) {",
                  "        console.error('Error creating task for failure test:', err);",
                  "        pm.environment.set('error_test_task_id', 'TASK_CREATION_FAILED');",
                  "    } else {",
                  "        try {",
                  "            const jsonData = res.json();",
                  "            if (jsonData && jsonData.data && jsonData.data.id) {",
                  "                pm.environment.set('error_test_task_id', jsonData.data.id);",
                  "                console.log('Created error test task with ID:', jsonData.data.id);",
                  "                ",
                  "                const errorPayload = { error: 'AI model could not process the request due to content constraints.' };",
                  "                const secret = pm.environment.get('n8n_callback_hmac_secret');",
                  "                if (secret && !placeholderSecrets.includes(secret) && secret.trim() !== '') {",
                  "                    const signature = CryptoJS.HmacSHA256(JSON.stringify(errorPayload), secret).toString(CryptoJS.enc.Hex);",
                  "                    pm.environment.set('hmac_signature', 'sha256=' + signature);",
                  "                    console.log('Generated HMAC for failure test: sha256=' + signature.substring(0, 10) + '...');",
                  "                } else {",
                  "                     console.warn('HMAC secret for failure test not set, signature will be invalid or bypassed.');",
                  "                     pm.environment.set('hmac_signature', 'invalid_due_to_missing_secret_for_failure');",
                  "                }",
                  "            } else {",
                  "                console.error('Invalid response when creating task for failure test:', jsonData);",
                  "                pm.environment.set('error_test_task_id', 'TASK_CREATION_INVALID_RESPONSE');",
                  "            }",
                  "        } catch (e) {",
                  "            console.error('Error parsing response for failure test task creation:', e);",
                  "            pm.environment.set('error_test_task_id', 'TASK_CREATION_PARSE_ERROR');",
                  "        }",
                  "    }",
                  "});",
                  "// Added placeholderSecrets definition here too for the pre-request script context",
                  "const placeholderSecrets = [\"{{N8N_CALLBACK_HMAC_SECRET_CI}}\", \"{{N8N_CALLBACK_HMAC_SECRET}}\", \"your-local-hmac-secret\", \"your-n8n-callback-hmac-secret-here\"];"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK (callback received)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates task failed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('status', 'failed');",
                  "    pm.expect(jsonData.data).to.have.property('was_updated', true);",
                  "    pm.expect(jsonData.data).to.have.property('error_details');",
                  "    pm.expect(jsonData.data.error_details).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-N8N-Signature",
                "value": "{{hmac_signature}}"
              },
              {
                "key": "X-Disable-Rate-Limiting",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"error\": \"AI model could not process the request due to content constraints.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ad-scripts/{{error_test_task_id}}/result",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "ad-scripts",
                "{{error_test_task_id}}",
                "result"
              ]
            },
            "description": "Simulates a callback from n8n reporting a failure. Uses `{{error_test_task_id}}` set by its pre-request script."
          },
          "response": []
        },
        {
          "name": "n8n Callback - Invalid Signature",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test's expectation depends on N8N_DISABLE_AUTH in Laravel .env",
                  "// If N8N_DISABLE_AUTH=true, expect 200. Otherwise, expect 401.",
                  "if (pm.environment.get(\"N8N_DISABLE_AUTH_IS_TRUE\") === \"true\") {",
                  "    pm.test(\"Status code is 200 OK (auth disabled)\", function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    pm.test(\"Response is valid JSON (auth disabled)\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.be.an('object');",
                  "    });",
                  "} else {",
                  "    pm.test(\"Status code is 401 Unauthorized (auth enabled)\", function () {",
                  "        pm.response.to.have.status(401);",
                  "    });",
                  "    pm.test(\"Response indicates invalid signature (auth enabled)\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('error', 'Invalid webhook signature');",
                  "    });",
                  "}",
                  "console.log('Note: Behavior of this test depends on N8N_DISABLE_AUTH in Laravel .env. Create an env var N8N_DISABLE_AUTH_IS_TRUE (string true/false) in Postman for accurate testing.');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-N8N-Signature",
                "value": "sha256=invalid-signature-on-purpose"
              },
              {
                "key": "X-Disable-Rate-Limiting",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"new_script\": \"This won't be processed.\",\n    \"analysis\": {}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ad-scripts/{{created_task_id}}/result",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "ad-scripts",
                "{{created_task_id}}",
                "result"
              ]
            },
            "description": "Simulates an n8n callback with an invalid HMAC signature. Behavior depends on N8N_DISABLE_AUTH in Laravel's .env. Set Postman environment variable `N8N_DISABLE_AUTH_IS_TRUE` to `\"true\"` or `\"false\"` to guide the test assertion."
          },
          "response": []
        },
        {
          "name": "n8n Callback - Validation Error (e.g., missing new_script and error)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const requestBody = pm.request.body.raw;",
                  "const secret = pm.environment.get(\"n8n_callback_hmac_secret\");",
                  "const requestName = pm.request.name;",
                  "",
                  "if (!requestBody) {",
                  "    console.warn(`[${requestName}] Request body is empty for HMAC generation.`);",
                  "    pm.environment.set(\"hmac_signature\", \"invalid_due_to_empty_body\");",
                  "    return;",
                  "}",
                  "",
                  "const placeholderSecrets = [\"{{N8N_CALLBACK_HMAC_SECRET_CI}}\", \"{{N8N_CALLBACK_HMAC_SECRET}}\", \"your-local-hmac-secret\", \"your-n8n-callback-hmac-secret-here\"];",
                  "if (!secret || placeholderSecrets.includes(secret) || secret.trim() === '') {",
                  "    console.warn(`[${requestName}] 'n8n_callback_hmac_secret' not set or is placeholder. Signature will be invalid or bypassed if N8N_DISABLE_AUTH=true.`);",
                  "    pm.environment.set(\"hmac_signature\", \"invalid_due_to_missing_secret\");",
                  "    return;",
                  "}",
                  "",
                  "try {",
                  "    const signature = CryptoJS.HmacSHA256(requestBody, secret).toString(CryptoJS.enc.Hex);",
                  "    const fullSignature = \"sha256=\" + signature;",
                  "    pm.environment.set(\"hmac_signature\", fullSignature);",
                  "    console.log(`[${requestName}] Generated HMAC Signature: ${fullSignature.substring(0,17)}...`);",
                  "} catch (e) {",
                  "    console.error(`[${requestName}] Error generating HMAC: ${e.message}`);",
                  "    pm.environment.set(\"hmac_signature\", \"invalid_due_to_generation_error\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422 Unprocessable Entity\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "pm.test(\"Response indicates payload validation error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.have.property('payload');",
                  "    pm.expect(jsonData.errors.payload[0]).to.include('Either new_script or error must be provided');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-N8N-Signature",
                "value": "{{hmac_signature}}"
              },
              {
                "key": "X-Disable-Rate-Limiting",
                "value": "true"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"analysis\": { \"some_info\": \"This payload is invalid as it lacks new_script or error\" }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/ad-scripts/{{created_task_id}}/result",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "ad-scripts",
                "{{created_task_id}}",
                "result"
              ]
            },
            "description": "Simulates an n8n callback with an invalid payload structure that fails Laravel's validation (missing both `new_script` and `error`)."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000/api",
      "type": "string",
      "description": "The base URL for your Laravel API. Change if your app runs on a different port or domain."
    },
    {
      "key": "n8n_callback_hmac_secret",
      "value": "another-very-strong-shared-secret-for-hmac",
      "type": "string",
      "description": "Shared secret for HMAC signature verification of n8n callbacks. Must match N8N_CALLBACK_HMAC_SECRET in Laravel's .env AND the secret key used in n8n's HMAC credential."
    },
    {
      "key": "created_task_id",
      "value": "",
      "type": "string",
      "description": "Automatically populated by the 'Create Ad Script Task (Success)' request. Used for success callback."
    },
    {
      "key": "error_test_task_id",
      "value": "",
      "type": "string",
      "description": "Automatically populated by pre-request script of 'n8n Callback - Failure'. Used for failure callback."
    },
    {
      "key": "hmac_signature",
      "value": "",
      "type": "string",
      "description": "Automatically populated by pre-request scripts for callback requests that require HMAC."
    }
  ]
}